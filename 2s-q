#include <iostream>
#include <stack>

class QueueUsingStacks {
private:
    std::stack<int> stack1;
    std::stack<int> stack2;

public:
    void enqueue(int item) {
        stack1.push(item);
    }

    int dequeue() {
        if (stack2.empty()) {
            while (!stack1.empty()) {
                stack2.push(stack1.top());
                stack1.pop();
            }
        }
        if (stack2.empty()) {
            throw std::out_of_range("dequeue from an empty queue");
        }
        int item = stack2.top();
        stack2.pop();
        return item;
    }

    bool isEmpty() {
        return stack1.empty() && stack2.empty();
    }

    int size() {
        return stack1.size() + stack2.size();
    }
};

int main() {
    QueueUsingStacks queue;
    queue.enqueue(1);
    queue.enqueue(2);
    queue.enqueue(3);
    
    std::cout << queue.dequeue() << std::endl; // 1
    std::cout << queue.dequeue() << std::endl; // 2
    std::cout << queue.size() << std::endl;    // 1
    std::cout << queue.dequeue() << std::endl; // 3

    return 0;
}
